{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chips\\\\Documents\\\\GitHub\\\\MovieShop-370-Final\\\\Application\\\\react-postgres\\\\src\\\\pages\\\\chat.js\",\n  _s = $RefreshSig$();\nimport io from 'socket.io-client';\nimport { useEffect, useState } from \"react\";\nimport UserProfile from \"../components/chat/user-profile\";\nimport ChatRoom from \"../components/chat/chat-room\";\nimport MessageSender from \"../components/chat/message-sender\";\nimport Navbar from '../components/navbar/navbar.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [user, setUser] = useState();\n  const [socket] = useState(io.connect(\"http://localhost:3001\"));\n  const [messages, setMessages] = useState([\n    // {author: \"Asia\", timestamp: Date.now(), content: \"blahabladhfsh\"},\n    // {author: \"Asia\", timestamp: Date.now(), content: \"blahabladhfsh\"},\n    // {author: \"Asia\", timestamp: Date.now(), content: \"blahabladhfsh\"},\n  ]);\n  socket.on(\"receive_message\", message => setMessages([...messages, message]));\n  socket.on(\"message_history\", messages => setMessages(messages));\n  useEffect(() => {\n    socket.emit(\"username\", {\n      name: user === null || user === void 0 ? void 0 : user.username\n    });\n  }, [user, socket]); //Watching for changes in the user variable\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n      updateUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatRoom, {\n      user: user,\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MessageSender, {\n      user: user,\n      sendMessage: message => socket.emit(\"send_message\", message)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Chat, \"a2fuK6AvBrWF5je4bWmjsvkk2Es=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["io","useEffect","useState","UserProfile","ChatRoom","MessageSender","Navbar","Chat","user","setUser","socket","connect","messages","setMessages","on","message","emit","name","username"],"sources":["C:/Users/chips/Documents/GitHub/MovieShop-370-Final/Application/react-postgres/src/pages/chat.js"],"sourcesContent":["import io from 'socket.io-client';\nimport {useEffect, useState} from \"react\";\nimport UserProfile from \"../components/chat/user-profile\";\nimport ChatRoom from \"../components/chat/chat-room\";\nimport MessageSender from \"../components/chat/message-sender\";\nimport Navbar from '../components/navbar/navbar.js';\n\nconst Chat = () => {\n    const [user, setUser] = useState();\n    const [socket] = useState(io.connect(\"http://localhost:3001\"));\n    const [messages, setMessages] = useState([\n        // {author: \"Asia\", timestamp: Date.now(), content: \"blahabladhfsh\"},\n        // {author: \"Asia\", timestamp: Date.now(), content: \"blahabladhfsh\"},\n        // {author: \"Asia\", timestamp: Date.now(), content: \"blahabladhfsh\"},\n    ]);\n    socket.on(\"receive_message\", message => setMessages([...messages, message]));\n    socket.on(\"message_history\", messages => setMessages(messages));\n    useEffect(() => {\n        socket.emit(\"username\", {name: user?.username});\n    }, [user, socket]); //Watching for changes in the user variable\n    return <>\n        <Navbar/>\n        <UserProfile updateUser={setUser}/>\n        <ChatRoom user={user} messages={messages}/>\n        <MessageSender user={user}\n                       sendMessage={message => socket.emit(\"send_message\", message)}/>\n    </>\n};\n\nexport default Chat;"],"mappings":";;AAAA,OAAOA,EAAE,MAAM,kBAAkB;AACjC,SAAQC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,OAAOC,WAAW,MAAM,iCAAiC;AACzD,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,aAAa,MAAM,mCAAmC;AAC7D,OAAOC,MAAM,MAAM,gCAAgC;AAAC;AAAA;AAEpD,MAAMC,IAAI,GAAG,MAAM;EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,EAAE;EAClC,MAAM,CAACQ,MAAM,CAAC,GAAGR,QAAQ,CAACF,EAAE,CAACW,OAAO,CAAC,uBAAuB,CAAC,CAAC;EAC9D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC;IACrC;IACA;IACA;EAAA,CACH,CAAC;EACFQ,MAAM,CAACI,EAAE,CAAC,iBAAiB,EAAEC,OAAO,IAAIF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEG,OAAO,CAAC,CAAC,CAAC;EAC5EL,MAAM,CAACI,EAAE,CAAC,iBAAiB,EAAEF,QAAQ,IAAIC,WAAW,CAACD,QAAQ,CAAC,CAAC;EAC/DX,SAAS,CAAC,MAAM;IACZS,MAAM,CAACM,IAAI,CAAC,UAAU,EAAE;MAACC,IAAI,EAAET,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU;IAAQ,CAAC,CAAC;EACnD,CAAC,EAAE,CAACV,IAAI,EAAEE,MAAM,CAAC,CAAC,CAAC,CAAC;EACpB,oBAAO;IAAA,wBACH,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAE,eACT,QAAC,WAAW;MAAC,UAAU,EAAED;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAE,eACnC,QAAC,QAAQ;MAAC,IAAI,EAAED,IAAK;MAAC,QAAQ,EAAEI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAE,eAC3C,QAAC,aAAa;MAAC,IAAI,EAAEJ,IAAK;MACX,WAAW,EAAEO,OAAO,IAAIL,MAAM,CAACM,IAAI,CAAC,cAAc,EAAED,OAAO;IAAE;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA,gBAC/E;AACP,CAAC;AAAC,GApBIR,IAAI;AAAA,KAAJA,IAAI;AAsBV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}